import django.db.models
from django.contrib.postgres.aggregates import ArrayAgg
from django.core.management.base import BaseCommand
from django.conf import settings

from tgbot.models import TelegramUser
from abiturient.models import Speciality, Exams
from telebot import TeleBot, types
from pathlib import Path
from django.db.models.functions import Concat
from django.db.models import F, Value
from django.db.models import Q

bot = TeleBot(token=settings.TELEGRAM_BOT_TOKEN)

MENU = 'MENU'
EGA = 'EGA'
SPO = 'SPO'

EGA_MAIN_EXAM = 'M'
EGA_CHOICE_EXAM = 'C'

SPECIALITY = 'S'

markup_menu = types.InlineKeyboardMarkup()
# markup_Menu.add(types.InlineKeyboardButton(text='–£–∑–Ω–∞—Ç—å –ø—Ä–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—èüëã', callback_data='direction_info'),
#                 types.InlineKeyboardButton(text='–£–∑–Ω–∞—Ç—å –ø—Ä–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏', callback_data='speciality_info'))
markup_menu.add(types.InlineKeyboardButton(text='–í—ã–±–æ—Ä –ø–æ –ï–ì–≠', callback_data=EGA))
markup_menu.add(types.InlineKeyboardButton(text='–ü–æ—Å—Ç—É–ø–∏—Ç—å –ø–æ –°–ü–û', callback_data=SPO))

markup_back = types.InlineKeyboardMarkup()
markup_back.add(types.InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data=MENU))







def telegram_user_validation(function):
    def validation(message):
        tg_user = message.from_user
        user, created = TelegramUser.objects.get_or_create(telegram_id=tg_user.id, name=tg_user.first_name)
        if user.is_banned:
            if isinstance(message, types.CallbackQuery):
                bot.edit_message_text(chat_id=message.message.chat.id, message_id=message.message.id,
                                      text='–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã')
            else:
                bot.send_message(message.chat.id, '–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã')
        else:
            function(message)
    return validation


@bot.message_handler(commands=['start'])
@telegram_user_validation
def command_start(message):
    bot.send_message(message.from_user.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π A–±–∏—Ç—É—Ä–∏–µ–Ω—Ç –î–í–ì–£–ü–° –ë–æ—Ç !', reply_markup=types.ReplyKeyboardRemove())
    bot.send_message(message.from_user.id, '–ú–µ–Ω—é', reply_markup=markup_menu)

@bot.message_handler(commands=['menu'])
@telegram_user_validation
def command_menu(message):
    bot.send_message(message.from_user.id, '–ú–µ–Ω—é', reply_markup=markup_menu)

@bot.callback_query_handler(func=lambda callback: callback.data)
@telegram_user_validation
def menu(callback):

    # –≤—ã—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if callback.data == MENU:
        bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.id, text='–ú–µ–Ω—é',
                              reply_markup=markup_menu)

    elif callback.data == SPO:
        bot.send_message(chat_id=callback.message.chat.id, text='–ó–¥–µ—Å—å —Ä–∞—Å—Å–∫–∞–∑–∞–Ω–æ –ø—Ä–æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –°–ü–û\nhttps://vk.com/dvgupspriemnayakomissia')
        bot.send_message(chat_id=callback.message.chat.id, text='https://t.me/abiturientdvgups')


    # –ø–æ –µ–≥—ç
    elif callback.data == EGA:
        markup = types.InlineKeyboardMarkup()
        exams = Speciality.objects.filter(degree__in=['1', '2']).annotate(
            exam_names=ArrayAgg('main_subjects__name'), exam_slugs=ArrayAgg('main_subjects__slug')
        ).values_list('exam_names', 'exam_slugs').distinct()

        for exam in exams:
            btn = types.InlineKeyboardButton(text='–†—É—Å. —è–∑—ã–∫ + '+ ' + '.join(exam[0]), callback_data=' + '.join(exam[1]) + EGA_MAIN_EXAM)
            markup.add(btn)

        markup.add(types.InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data=MENU))
        bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.id,
                              text='–í—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–∫–∑–º–µ–Ω—ã',
                              reply_markup=markup)




    #–ø–æ –µ–≥—ç —ç–∫–∑ –Ω–∞ –≤—ã–±–æ—Ä
    elif callback.data[-1] == EGA_MAIN_EXAM:
        markup = types.InlineKeyboardMarkup()
        main_exams_slugs = callback.data[:-1].split(' + ')

        exams = Speciality.objects.annotate(
             main_subjects_list=ArrayAgg('main_subjects__slug')
        ).filter(main_subjects_list__contains=main_exams_slugs).\
            distinct().values_list('choice_subjects__name', 'choice_subjects__slug')

        main_exams_names = list(Speciality.objects.filter(main_subjects__slug__in=main_exams_slugs).distinct().values_list(
            'main_subjects__name', flat=True))

        for exam in exams:
            btn = types.InlineKeyboardButton(text='–†—É—Å. —è–∑—ã–∫ + ' + ' + '.join(main_exams_names) + ' + ' + exam[0], callback_data='+'.join(main_exams_slugs) + '+' + exam[1] + EGA_CHOICE_EXAM)
            markup.add(btn)

        markup.add(types.InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data=MENU))
        bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.id,
                              text='–í—ã–±–µ—Ä–∏—Ç–µ –î–æ–ø —ç–∫–∑–º–µ–Ω—ã',
                              reply_markup=markup)

    #–≤—ã–±–æ—Ä —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π
    elif callback.data[-1] == EGA_CHOICE_EXAM:
        markup = types.InlineKeyboardMarkup()
        main_exams, choice_exam = callback.data[:-1].split('+')

        specialities = Speciality.objects.filter(main_subjects__slug=main_exams, choice_subjects__slug=choice_exam). \
            distinct().values_list('name', 'code')

        for speciality in specialities:
            btn = types.InlineKeyboardButton(text=speciality[0],
                                             callback_data=speciality[1] + SPECIALITY)
            markup.add(btn)

        markup.add(types.InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data=main_exams + EGA_MAIN_EXAM))
        markup.add(types.InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data=MENU))
        bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.id,
                              text='–°–ü–ï–¶–ò–ê–õ–¨–ù–û–°–¢–ò',
                              reply_markup=markup)

    elif callback.data[-1] == SPECIALITY:
        speciality = Speciality.objects.get(code=callback.data[:-1])
        bot.send_message(chat_id=callback.message.chat.id, text=speciality.name)

        bot.send_message(chat_id=callback.message.chat.id, text=speciality.description)

    else:
        print(callback.data[-1] == EGA_MAIN_EXAM)
        pass


@bot.message_handler(content_types=['text'])
def send_text(message:types.Message):
    speciality = Speciality.objects.get(name=message.text)
    if not speciality == None:
        bot.send_message(chat_id=message.chat.id, text=speciality.name)

        bot.send_message(chat_id=message.chat.id, text=speciality.description)
    elif message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é':
        bot.send_message(message.from_user.id, '–ú–µ–Ω—é', reply_markup=markup_menu)
    else:
        bot.send_message(message.from_user.id, '–Ω–µ –∑–Ω–∞—é —Ç–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É')


class Command(BaseCommand):
    help = '–ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç –î–í–ì–£–ü–°'
    while True:
        try:
            bot.polling(none_stop=True)
        except Exception as exception:
            print('bolt', exception)